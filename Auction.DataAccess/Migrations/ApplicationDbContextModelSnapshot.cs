// <auto-generated />
using System;
using Auction.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Auction.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Auction.Models.AuctionListing", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionId"));

                    b.Property<decimal?>("CurrentHighestBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HighestBidderId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBidStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReservationPriceMet")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinimumBidIncrement")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<decimal>("ReservationPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("StartingBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AuctionId");

                    b.HasIndex("PropertyId");

                    b.ToTable("AuctionListings");

                    b.HasData(
                        new
                        {
                            AuctionId = 1,
                            CurrentHighestBid = 8500000m,
                            EndDate = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBidStarted = false,
                            IsReservationPriceMet = false,
                            MinimumBidIncrement = 50000m,
                            PropertyId = 1,
                            ReservationPrice = 10000000m,
                            StartDate = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 8500000m,
                            Status = 0
                        },
                        new
                        {
                            AuctionId = 2,
                            CurrentHighestBid = 15000000m,
                            EndDate = new DateTime(2025, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBidStarted = false,
                            IsReservationPriceMet = false,
                            MinimumBidIncrement = 100000m,
                            PropertyId = 2,
                            ReservationPrice = 18000000m,
                            StartDate = new DateTime(2025, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 15000000m,
                            Status = 0
                        },
                        new
                        {
                            AuctionId = 3,
                            CurrentHighestBid = 12000000m,
                            EndDate = new DateTime(2025, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBidStarted = false,
                            IsReservationPriceMet = false,
                            MinimumBidIncrement = 75000m,
                            PropertyId = 3,
                            ReservationPrice = 14000000m,
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 12000000m,
                            Status = 0
                        },
                        new
                        {
                            AuctionId = 4,
                            CurrentHighestBid = 28500000m,
                            EndDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HighestBidderId = "e4c2f668-5c51-4fd1-9b55-b5dd9b33abb7",
                            IsBidStarted = true,
                            IsReservationPriceMet = true,
                            MinimumBidIncrement = 150000m,
                            PropertyId = 4,
                            ReservationPrice = 27000000m,
                            StartDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 25000000m,
                            Status = 1
                        },
                        new
                        {
                            AuctionId = 5,
                            CurrentHighestBid = 52000000m,
                            EndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HighestBidderId = "f682334f-82e1-4b89-8a56-89e4b7efde93",
                            IsBidStarted = true,
                            IsReservationPriceMet = true,
                            MinimumBidIncrement = 250000m,
                            PropertyId = 5,
                            ReservationPrice = 48000000m,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 45000000m,
                            Status = 1
                        },
                        new
                        {
                            AuctionId = 6,
                            CurrentHighestBid = 23500000m,
                            EndDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HighestBidderId = "g7d1c8e2-94a3-4d6b-ac32-b61e1e7b76d9",
                            IsBidStarted = true,
                            IsReservationPriceMet = true,
                            MinimumBidIncrement = 100000m,
                            PropertyId = 6,
                            ReservationPrice = 22000000m,
                            StartDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 20000000m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Auction.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BidTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("Auction.Models.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("PropertyCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyCategoryId1")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.HasIndex("PropertyCategoryId");

                    b.HasIndex("PropertyCategoryId1");

                    b.HasIndex("SellerId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Description = "Elegant contemporary mansion with smart home features and panoramic valley views.",
                            ImageUrl = "",
                            Location = "Beverly Hills, CA",
                            NumberOfBathrooms = 5,
                            NumberOfRooms = 6,
                            PropertyCategoryId = 1,
                            SellerId = "b68d3f5a-b414-48d9-8e34-7c6dde3941ef",
                            Size = 5200.0,
                            Title = "Sunset Valley Estate",
                            VideoUrl = "",
                            YearBuilt = 2022
                        },
                        new
                        {
                            PropertyId = 2,
                            Description = "Luxury beachfront resort property with private beach access and full-service amenities.",
                            ImageUrl = "",
                            Location = "Maui, HI",
                            NumberOfBathrooms = 14,
                            NumberOfRooms = 12,
                            PropertyCategoryId = 2,
                            SellerId = "b68d3f5a-b414-48d9-8e34-7c6dde3941ef",
                            Size = 8500.0,
                            Title = "Ocean Breeze Resort Complex",
                            VideoUrl = "",
                            YearBuilt = 2021
                        },
                        new
                        {
                            PropertyId = 3,
                            Description = "Expansive ranch property with equestrian facilities and mountain backdrop.",
                            ImageUrl = "",
                            Location = "Aspen, CO",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PropertyCategoryId = 3,
                            SellerId = "c1ce93ad-1e91-4b79-9f43-9f1d51d33511",
                            Size = 15000.0,
                            Title = "Mountain View Ranch",
                            VideoUrl = "",
                            YearBuilt = 2015
                        },
                        new
                        {
                            PropertyId = 4,
                            Description = "Ultra-luxury penthouse with 360-degree views and private helipad access.",
                            ImageUrl = "",
                            Location = "Manhattan, NY",
                            NumberOfBathrooms = 5,
                            NumberOfRooms = 5,
                            PropertyCategoryId = 1,
                            SellerId = "c1ce93ad-1e91-4b79-9f43-9f1d51d33511",
                            Size = 4800.0,
                            Title = "Skyline Tower Penthouse",
                            VideoUrl = "",
                            YearBuilt = 2023
                        },
                        new
                        {
                            PropertyId = 5,
                            Description = "State-of-the-art office complex with sustainable design and tech infrastructure.",
                            ImageUrl = "",
                            Location = "Austin, TX",
                            NumberOfBathrooms = 8,
                            NumberOfRooms = 20,
                            PropertyCategoryId = 2,
                            SellerId = "d9a9b8d7-73b2-4f28-9177-e1f9239e6673",
                            Size = 12000.0,
                            Title = "Innovation Hub Complex",
                            VideoUrl = "",
                            YearBuilt = 2024
                        },
                        new
                        {
                            PropertyId = 6,
                            Description = "Prime wine country acreage with approved development plans and existing vineyards.",
                            ImageUrl = "",
                            Location = "Napa Valley, CA",
                            NumberOfBathrooms = 0,
                            NumberOfRooms = 0,
                            PropertyCategoryId = 3,
                            SellerId = "d9a9b8d7-73b2-4f28-9177-e1f9239e6673",
                            Size = 25000.0,
                            Title = "Vineyard Estate Development",
                            VideoUrl = "",
                            YearBuilt = 0
                        });
                });

            modelBuilder.Entity("Auction.Models.PropertyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PropertyCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Residential"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Commercial"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Land"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c5ddd595-f622-456a-994a-36ebe2e1c383",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4aa1853c-874f-48fb-b656-73855d9e074f",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "e72c91f6-490e-41ec-b770-86ca471e698a",
                            Name = "Buyer",
                            NormalizedName = "BUYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "c5ddd595-f622-456a-994a-36ebe2e1c383"
                        },
                        new
                        {
                            UserId = "b68d3f5a-b414-48d9-8e34-7c6dde3941ef",
                            RoleId = "4aa1853c-874f-48fb-b656-73855d9e074f"
                        },
                        new
                        {
                            UserId = "c1ce93ad-1e91-4b79-9f43-9f1d51d33511",
                            RoleId = "4aa1853c-874f-48fb-b656-73855d9e074f"
                        },
                        new
                        {
                            UserId = "d9a9b8d7-73b2-4f28-9177-e1f9239e6673",
                            RoleId = "4aa1853c-874f-48fb-b656-73855d9e074f"
                        },
                        new
                        {
                            UserId = "e4c2f668-5c51-4fd1-9b55-b5dd9b33abb7",
                            RoleId = "e72c91f6-490e-41ec-b770-86ca471e698a"
                        },
                        new
                        {
                            UserId = "f682334f-82e1-4b89-8a56-89e4b7efde93",
                            RoleId = "e72c91f6-490e-41ec-b770-86ca471e698a"
                        },
                        new
                        {
                            UserId = "g7d1c8e2-94a3-4d6b-ac32-b61e1e7b76d9",
                            RoleId = "e72c91f6-490e-41ec-b770-86ca471e698a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Auction.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33e25cbd-3cd2-4246-b1d8-eab359db5d9a",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELU+wsetPqml4o5EdyM4wY7occWYAm93T8CI6J9Pt4TJ3asulyX2T8zKZk5qy2r6vA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b167bdfd-4e6a-4766-a141-60cd780c715e",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com",
                            Name = "Admin User"
                        },
                        new
                        {
                            Id = "b68d3f5a-b414-48d9-8e34-7c6dde3941ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "624c5601-9510-4581-a205-d62b67b75150",
                            Email = "seller1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER1@EXAMPLE.COM",
                            NormalizedUserName = "SELLER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHot2gcER/3QYjX6N9i2AVgr1bdCkiHdy5PCYXWmg8qezL25H38NyCE80iAk94m/hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "598ebed0-05f5-4ea2-a143-11f777aee769",
                            TwoFactorEnabled = false,
                            UserName = "seller1@example.com",
                            Name = "Seller One"
                        },
                        new
                        {
                            Id = "c1ce93ad-1e91-4b79-9f43-9f1d51d33511",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7427f7db-6b90-4996-9f00-aa56c4ca8e3f",
                            Email = "seller2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER2@EXAMPLE.COM",
                            NormalizedUserName = "SELLER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9jeDjZRkSjWRBUEe12M//+/YLwIrnax7tAFIvPeh7t9MMrghikcHfT14pCTN7f6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d609eae-0162-46ec-861b-77a624bfb21f",
                            TwoFactorEnabled = false,
                            UserName = "seller2@example.com",
                            Name = "Seller Two"
                        },
                        new
                        {
                            Id = "d9a9b8d7-73b2-4f28-9177-e1f9239e6673",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1926086f-0413-49c8-a1e9-672e61d4e78e",
                            Email = "seller3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER3@EXAMPLE.COM",
                            NormalizedUserName = "SELLER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBr6TrNzqr453Nq5AV8+cEyL9G5F/cYG2HqDoBYgrqiFo/psS1+fY8IJnpKUfxHCdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f270a20f-e0a2-4f81-894b-cfaebccb8f02",
                            TwoFactorEnabled = false,
                            UserName = "seller3@example.com",
                            Name = "Seller Three"
                        },
                        new
                        {
                            Id = "e4c2f668-5c51-4fd1-9b55-b5dd9b33abb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6753600-e3a4-4526-b5cb-2f6c670ae37a",
                            Email = "buyer1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER1@EXAMPLE.COM",
                            NormalizedUserName = "BUYER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVqDXiGnmfn1c3UStMOP4LiwZVGJ+MOrz9mx/zzyRq+fyMZ4T3HlmqV+Aj5ucx1WQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7660a85c-f509-4402-b74d-7f91b00cd471",
                            TwoFactorEnabled = false,
                            UserName = "buyer1@example.com",
                            Name = "Buyer One"
                        },
                        new
                        {
                            Id = "f682334f-82e1-4b89-8a56-89e4b7efde93",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22efe663-ca8a-45c6-a115-9d062ed20f33",
                            Email = "buyer2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER2@EXAMPLE.COM",
                            NormalizedUserName = "BUYER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENptiyNOejpJblqglsrjlm1ZhfYYw4hNTAFmKgtky3tiNRBgyRQOAPNoQTQcInVFXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d71a321-4745-4bde-884b-38c6c8fdacbc",
                            TwoFactorEnabled = false,
                            UserName = "buyer2@example.com",
                            Name = "Buyer Two"
                        },
                        new
                        {
                            Id = "g7d1c8e2-94a3-4d6b-ac32-b61e1e7b76d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d4a76b-ed06-4f73-be2f-924234afa07b",
                            Email = "buyer3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER3@EXAMPLE.COM",
                            NormalizedUserName = "BUYER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB2kL6IhK/Q2iCVyWSlnMCESp+SjhAr+rNX4T2VoWf3HL1eeP4tpHMW67CdxhUuzkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af2f928c-6961-4b3a-aaef-5d7249491718",
                            TwoFactorEnabled = false,
                            UserName = "buyer3@example.com",
                            Name = "Buyer Three"
                        });
                });

            modelBuilder.Entity("Auction.Models.AuctionListing", b =>
                {
                    b.HasOne("Auction.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Auction.Models.Bid", b =>
                {
                    b.HasOne("Auction.Models.AuctionListing", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Auction.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Auction.Models.Property", b =>
                {
                    b.HasOne("Auction.Models.PropertyCategory", "PropertyCategory")
                        .WithMany()
                        .HasForeignKey("PropertyCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Auction.Models.PropertyCategory", null)
                        .WithMany("Properties")
                        .HasForeignKey("PropertyCategoryId1");

                    b.HasOne("Auction.Models.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PropertyCategory");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auction.Models.AuctionListing", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("Auction.Models.PropertyCategory", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
