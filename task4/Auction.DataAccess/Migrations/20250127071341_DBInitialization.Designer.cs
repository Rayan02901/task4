// <auto-generated />
using System;
using Auction.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Auction.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250127071341_DBInitialization")]
    partial class DBInitialization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Auction.Models.AuctionListing", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionId"));

                    b.Property<decimal?>("CurrentHighestBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HighestBidderId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBidStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReservationPriceMet")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinimumBidIncrement")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<decimal>("ReservationPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("StartingBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AuctionId");

                    b.HasIndex("PropertyId");

                    b.ToTable("AuctionListings");

                    b.HasData(
                        new
                        {
                            AuctionId = 1,
                            CurrentHighestBid = 500000m,
                            EndDate = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBidStarted = false,
                            IsReservationPriceMet = false,
                            MinimumBidIncrement = 5000m,
                            PropertyId = 1,
                            ReservationPrice = 600000m,
                            StartDate = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 500000m,
                            Status = 0
                        },
                        new
                        {
                            AuctionId = 2,
                            CurrentHighestBid = 1000000m,
                            EndDate = new DateTime(2025, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBidStarted = false,
                            IsReservationPriceMet = false,
                            MinimumBidIncrement = 10000m,
                            PropertyId = 2,
                            ReservationPrice = 1200000m,
                            StartDate = new DateTime(2025, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 1000000m,
                            Status = 0
                        },
                        new
                        {
                            AuctionId = 3,
                            CurrentHighestBid = 300000m,
                            EndDate = new DateTime(2025, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBidStarted = false,
                            IsReservationPriceMet = false,
                            MinimumBidIncrement = 3000m,
                            PropertyId = 3,
                            ReservationPrice = 350000m,
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 300000m,
                            Status = 0
                        },
                        new
                        {
                            AuctionId = 4,
                            CurrentHighestBid = 950000m,
                            EndDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HighestBidderId = "ed4b9012-2345-6789-1234-bc12def34567",
                            IsBidStarted = true,
                            IsReservationPriceMet = true,
                            MinimumBidIncrement = 5000m,
                            PropertyId = 4,
                            ReservationPrice = 900000m,
                            StartDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 800000m,
                            Status = 1
                        },
                        new
                        {
                            AuctionId = 5,
                            CurrentHighestBid = 2500000m,
                            EndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HighestBidderId = "fc5c0123-4567-8901-2345-bc12def34567",
                            IsBidStarted = true,
                            IsReservationPriceMet = true,
                            MinimumBidIncrement = 20000m,
                            PropertyId = 5,
                            ReservationPrice = 2200000m,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 2000000m,
                            Status = 1
                        },
                        new
                        {
                            AuctionId = 6,
                            CurrentHighestBid = 1800000m,
                            EndDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HighestBidderId = "ab6d1234-5678-9012-3456-bc12def34567",
                            IsBidStarted = true,
                            IsReservationPriceMet = true,
                            MinimumBidIncrement = 10000m,
                            PropertyId = 6,
                            ReservationPrice = 1700000m,
                            StartDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingBid = 1500000m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Auction.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BidTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("Auction.Models.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("PropertyCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyCategoryId1")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.HasIndex("PropertyCategoryId");

                    b.HasIndex("PropertyCategoryId1");

                    b.HasIndex("SellerId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Description = "A beautiful modern house located in the heart of the city.",
                            ImageUrl = "",
                            Location = "Los Angeles, CA",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PropertyCategoryId = 1,
                            SellerId = "fa0a5657-8901-2345-6789-bc12def34567",
                            Size = 2500.5,
                            Title = "Modern Family House",
                            VideoUrl = "",
                            YearBuilt = 2015
                        },
                        new
                        {
                            PropertyId = 2,
                            Description = "A stunning villa overlooking the ocean with premium amenities.",
                            ImageUrl = "",
                            Location = "Miami, FL",
                            NumberOfBathrooms = 5,
                            NumberOfRooms = 6,
                            PropertyCategoryId = 2,
                            SellerId = "fa0a5657-8901-2345-6789-bc12def34567",
                            Size = 4500.0,
                            Title = "Luxury Beachfront Villa",
                            VideoUrl = "",
                            YearBuilt = 2020
                        },
                        new
                        {
                            PropertyId = 3,
                            Description = "A charming cottage in a peaceful countryside setting.",
                            ImageUrl = "",
                            Location = "Asheville, NC",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 3,
                            PropertyCategoryId = 3,
                            SellerId = "cd2a7890-5678-1234-4567-bc12def34567",
                            Size = 1200.0,
                            Title = "Cozy Cottage",
                            VideoUrl = "",
                            YearBuilt = 1990
                        },
                        new
                        {
                            PropertyId = 4,
                            Description = "Luxurious penthouse with panoramic city views.",
                            ImageUrl = "",
                            Location = "New York, NY",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 5,
                            PropertyCategoryId = 1,
                            SellerId = "cd2a7890-5678-1234-4567-bc12def34567",
                            Size = 3000.0,
                            Title = "Downtown Penthouse",
                            VideoUrl = "",
                            YearBuilt = 2018
                        },
                        new
                        {
                            PropertyId = 5,
                            Description = "Prime location office space in business district.",
                            ImageUrl = "",
                            Location = "Chicago, IL",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PropertyCategoryId = 2,
                            SellerId = "de3a8901-3456-7890-1234-bc12def34567",
                            Size = 5000.0,
                            Title = "Commercial Office Space",
                            VideoUrl = "",
                            YearBuilt = 2019
                        },
                        new
                        {
                            PropertyId = 6,
                            Description = "Beautiful waterfront land ready for development.",
                            ImageUrl = "",
                            Location = "Seattle, WA",
                            NumberOfBathrooms = 0,
                            NumberOfRooms = 0,
                            PropertyCategoryId = 3,
                            SellerId = "de3a8901-3456-7890-1234-bc12def34567",
                            Size = 10000.0,
                            Title = "Waterfront Land Plot",
                            VideoUrl = "",
                            YearBuilt = 0
                        });
                });

            modelBuilder.Entity("Auction.Models.PropertyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PropertyCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Residential"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Commercial"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Land"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "348e5667-5048-4292-b249-b4b55531606d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "27f77397-3ab6-4cba-8e57-31e0d16e5a98",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "82426088-ca71-439c-b0c2-9c9194aa2cc0",
                            Name = "Buyer",
                            NormalizedName = "BUYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b4db56e8-1234-4567-8901-bc12def34567",
                            RoleId = "348e5667-5048-4292-b249-b4b55531606d"
                        },
                        new
                        {
                            UserId = "fa0a5657-8901-2345-6789-bc12def34567",
                            RoleId = "27f77397-3ab6-4cba-8e57-31e0d16e5a98"
                        },
                        new
                        {
                            UserId = "cd2a7890-5678-1234-4567-bc12def34567",
                            RoleId = "27f77397-3ab6-4cba-8e57-31e0d16e5a98"
                        },
                        new
                        {
                            UserId = "de3a8901-3456-7890-1234-bc12def34567",
                            RoleId = "27f77397-3ab6-4cba-8e57-31e0d16e5a98"
                        },
                        new
                        {
                            UserId = "ed4b9012-2345-6789-1234-bc12def34567",
                            RoleId = "82426088-ca71-439c-b0c2-9c9194aa2cc0"
                        },
                        new
                        {
                            UserId = "fc5c0123-4567-8901-2345-bc12def34567",
                            RoleId = "82426088-ca71-439c-b0c2-9c9194aa2cc0"
                        },
                        new
                        {
                            UserId = "ab6d1234-5678-9012-3456-bc12def34567",
                            RoleId = "82426088-ca71-439c-b0c2-9c9194aa2cc0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Auction.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "b4db56e8-1234-4567-8901-bc12def34567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab0c4f98-0992-45d1-9ca0-508ba97f6ff5",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENWDZNev4PbH/CfJR0FrbUiM3DXHEgmJ0um/5u0xCFim70jxmFG6jglFAl/pVkcwsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb298898-76da-41a3-bdee-02da1cd3859b",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com",
                            Name = "Admin User"
                        },
                        new
                        {
                            Id = "fa0a5657-8901-2345-6789-bc12def34567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "259568c7-58dc-4bc1-b4c5-ba761a1fd2be",
                            Email = "seller1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER1@EXAMPLE.COM",
                            NormalizedUserName = "SELLER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBmPpVL+d4oH7hyRZD/guU2BZ1k75TZIXxWgA3sjNOvJ1wBVlmfPpK+ZjUt2nWtrtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8c45829-2f39-4bdd-8364-9b62f79a7073",
                            TwoFactorEnabled = false,
                            UserName = "seller1@example.com",
                            Name = "Seller One"
                        },
                        new
                        {
                            Id = "cd2a7890-5678-1234-4567-bc12def34567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dea9d862-1b12-41f3-98a2-6d430e9751c9",
                            Email = "seller2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER2@EXAMPLE.COM",
                            NormalizedUserName = "SELLER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOv/XGyqUR8IVY83zNzUeZWT+VW622F9WFX8XnZkAfgfobeoIOAFsZSWDqd6Hidgzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc6af4d5-8003-46d0-9fc4-6e1968feb42d",
                            TwoFactorEnabled = false,
                            UserName = "seller2@example.com",
                            Name = "Seller Two"
                        },
                        new
                        {
                            Id = "de3a8901-3456-7890-1234-bc12def34567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b37ce505-ed51-4378-b6bb-7084500f762c",
                            Email = "seller3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER3@EXAMPLE.COM",
                            NormalizedUserName = "SELLER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKfgBf1BE4FsKrdNJ0s6UFAfjRNOPljLMkk453mBY7dfE3O/4If81PVPp9TdXAbg9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "957e0e26-2bd6-404f-9d73-17a4876e00e5",
                            TwoFactorEnabled = false,
                            UserName = "seller3@example.com",
                            Name = "Seller Three"
                        },
                        new
                        {
                            Id = "ed4b9012-2345-6789-1234-bc12def34567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "229ae3d4-880d-41d2-ad6c-8ce45658bf61",
                            Email = "buyer1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER1@EXAMPLE.COM",
                            NormalizedUserName = "BUYER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECf2S5ey/BDRrkn3ZvgGHEYakZA4Ndjfif15JnvwAuWF80PPgXaOEKJF/diUGeJoSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa29f5f7-86e1-4a73-95c8-39453173e7ff",
                            TwoFactorEnabled = false,
                            UserName = "buyer1@example.com",
                            Name = "Buyer One"
                        },
                        new
                        {
                            Id = "fc5c0123-4567-8901-2345-bc12def34567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "504d4ec3-6f2e-464d-b0a1-3339956229a9",
                            Email = "buyer2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER2@EXAMPLE.COM",
                            NormalizedUserName = "BUYER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIJOWksR9myMuO5yyy9l5Xe0Scn9GuqBprNFG1xsQOXdoHitwsMv1RFsZis4GxvtIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7af39da3-0773-4c7d-97c7-83c943cb0c6c",
                            TwoFactorEnabled = false,
                            UserName = "buyer2@example.com",
                            Name = "Buyer Two"
                        },
                        new
                        {
                            Id = "ab6d1234-5678-9012-3456-bc12def34567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afddfb46-b4d0-421c-afd0-18ca63641f97",
                            Email = "buyer3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER3@EXAMPLE.COM",
                            NormalizedUserName = "BUYER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFDV0W9dxs/TZR6OubkVmM7BXnTLauIrA0DSaXtZaz0hEvjRQIm3Gi4z+RNM19KGUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2076fe34-6a39-480b-9946-c92b46911929",
                            TwoFactorEnabled = false,
                            UserName = "buyer3@example.com",
                            Name = "Buyer Three"
                        });
                });

            modelBuilder.Entity("Auction.Models.AuctionListing", b =>
                {
                    b.HasOne("Auction.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Auction.Models.Bid", b =>
                {
                    b.HasOne("Auction.Models.AuctionListing", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("Auction.Models.Property", b =>
                {
                    b.HasOne("Auction.Models.PropertyCategory", "PropertyCategory")
                        .WithMany()
                        .HasForeignKey("PropertyCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Auction.Models.PropertyCategory", null)
                        .WithMany("Properties")
                        .HasForeignKey("PropertyCategoryId1");

                    b.HasOne("Auction.Models.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PropertyCategory");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auction.Models.AuctionListing", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("Auction.Models.PropertyCategory", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
